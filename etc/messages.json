{
  "meta": {
    "comment": "This code was auto-generated by the eno-locales project",
    "timestamp": "2018-07-21T07:50:30.125Z",
    "url": "https://github.com/eno-lang/eno-locales/",
    "version": "0.8.0"
  },
  "messages": {
    "de": {
      "Elements": {
        "Document": "Dokument",
        "Empty": "Leeres Element",
        "Field": "Feld",
        "Fieldset": "Fieldset",
        "Fieldset Entry": "Fieldset Eintrag",
        "List": "Liste",
        "List Item": "Listeneintrag",
        "Section": "Sektion",
        "Value": "Wert"
      },
      "Reporting": {
        "Content Header": "Inhalt",
        "Gutter Header": "Zeile"
      },
      "Tokenization": {
        "Invalid Line": "(LINE) => Zeile [LINE] folgt keinem spezifierten Muster.",
        "Unterminated Block": "(NAME, LINE) => Der Block '[NAME]' der in Zeile [LINE] beginnt wird bis zum Ende des Dokuments nicht mehr beendet.",
        "Unterminated Escaped Name": "(LINE) => In Zeile [LINE] wird der Name eines Elements escaped, jedoch wird diese Escape Sequenz bis zum Ende der Zeile nicht mehr beendet."
      },
      "Analysis": {
        "Duplicate Fieldset Entry Name": "(FIELDSET_NAME, ENTRY_NAME) => Das Fieldset '[FIELDSET_NAME]' enthält zwei Einträge mit dem Namen '[ENTRY_NAME]'.",
        "Fieldset Entry In Field": "(LINE) => Zeile [LINE] enthält einen Fieldset Eintrag in einem Feld.",
        "Fieldset Entry In List": "(LINE) => Zeile [LINE] enthält einen Fieldset Eintrag in einer Liste.",
        "List Item In Field": "(LINE) => Zeile [LINE] enthält einen Listeneintrag in einem Feld",
        "List Item In Fieldset": "(LINE) => Zeile [LINE] enthält einen Listeneintrag in einem Fieldset",
        "Missing Element For Continuation": "(LINE) => Zeile [LINE] enthält eine Fortsetzung ohne dass davor ein fortsetzbares Element angegeben wurde.",
        "Missing Name For Fieldset Entry": "(LINE) => Zeile [LINE] enthält einen Fieldset Eintrag ohne dass davor ein Name für ein Fieldset angegeben wurde.",
        "Missing Name For List Item": "(LINE) => Zeile [LINE] enthält einen Listeneintrag ohne dass davor ein Name für eine Liste angegeben wurde.",
        "Section Hierarchy Layer Skip": "(LINE) => Zeile [LINE] beginnt eine Sektion die mehr als eine Ebene tiefer liegt als die aktuelle."
      },
      "Resolution": {
        "Copying Block Into Fieldset": "(LINE) => In Zeile [LINE] wird ein Block in ein Fieldset kopiert.",
        "Copying Block Into List": "(LINE) => In Zeile [LINE] wird ein Block in eine Liste kopiert.",
        "Copying Block Into Section": "(LINE) => In Zeile [LINE] wird ein Block in eine Sektion kopiert.",
        "Copying Field Into Fieldset": "(LINE) => In Zeile [LINE] wird ein Feld in ein Fieldset kopiert.",
        "Copying Field Into List": "(LINE) => In Zeile [LINE] wird ein Feld in eine Liste kopiert.",
        "Copying Field Into Section": "(LINE) => In Zeile [LINE] wird ein Feld in eine Sektion kopiert.",
        "Copying Fieldset Into Field": "(LINE) => In Zeile [LINE] wird ein Fieldset in ein Feld kopiert.",
        "Copying Fieldset Into List": "(LINE) => In Zeile [LINE] wird ein Fieldset in eine Liste kopiert.",
        "Copying Fieldset Into Section": "(LINE) => In Zeile [LINE] wird ein Fieldset in eine Sektion kopiert.",
        "Copying List Into Field": "(LINE) => In Zeile [LINE] wird eine Liste in ein Feld kopiert.",
        "Copying List Into Fieldset": "(LINE) => In Zeile [LINE] wird eine Liste in ein Fieldset kopiert.",
        "Copying List Into Section": "(LINE) => In Zeile [LINE] wird eine Liste in eine Sektion kopiert.",
        "Copying Section Into Empty": "(LINE) => In Zeile [LINE] wird eine Sektion in ein leeres Element kopiert.",
        "Copying Section Into Field": "(LINE) => In Zeile [LINE] wird eine Sektion in ein Feld kopiert.",
        "Copying Section Into Fieldset": "(LINE) => In Zeile [LINE] wird eine Sektion in ein Fieldset kopiert.",
        "Copying Section Into List": "(LINE) => In Zeile [LINE] wird eine Sektion in eine Liste kopiert.",
        "Cyclic Dependency": "(LINE, NAME) => In Zeile [LINE] wird '[NAME]' in sich selbst kopiert.",
        "Multiple Templates Found": "(LINE, NAME) => In Zeile [LINE] ist nicht klar welches der Elemente mit dem Namen '[NAME]' kopiert werden soll.",
        "Template Not Found": "(LINE, NAME) => In Zeile [LINE] soll das Element '[NAME]' kopiert werden, es wurde aber nicht gefunden."
      },
      "Validation": {
        "Exact Count Not Met": "(NAME, ACTUAL, EXPECTED) => Die Liste '[NAME]' enthält [ACTUAL] Einträge, muss aber genau [EXPECTED] Einträge enthalten.",
        "Excess Name": "(NAME) => Ein überschüssiges Element mit dem Namen '[NAME]' wurde gefunden, handelt es sich eventuell um einen Tippfehler?",
        "Expected Element Got Elements": "(NAME) => Statt dem erwarteten einzelnen Element '[NAME]' wurden mehrere Elemente mit diesem Namen vorgefunden.",
        "Expected Field Got Fields": "(NAME) => Statt dem erwarteten einzelnen Feld '[NAME]' wurden mehrere Felder mit diesem Namen vorgefunden.",
        "Expected Field Got Fieldset": "(NAME) => Statt dem erwarteten Feld '[NAME]' wurde ein Fieldset mit diesem Namen vorgefunden.",
        "Expected Field Got List": "(NAME) => Statt dem erwarteten Feld '[NAME]' wurde eine Liste mit diesem Namen vorgefunden.",
        "Expected Field Got Section": "(NAME) => Statt dem erwarteten Feld '[NAME]' wurde eine Sektion mit diesem Namen vorgefunden.",
        "Expected Fields Got Fieldset": "(NAME) => Es wurden nur Felder mit dem Namen '[NAME]' erwartet, jedoch ein Fieldset mit diesem Namen vorgefunden.",
        "Expected Fields Got List": "(NAME) => Es wurden nur Felder mit dem Namen '[NAME]' erwartet, jedoch eine Liste mit diesem Namen vorgefunden.",
        "Expected Fields Got Section": "(NAME) => Es wurden nur Felder mit dem Namen '[NAME]' erwartet, jedoch eine Sektion mit diesem Namen vorgefunden.",
        "Expected Fieldset Got Field": "(NAME) => Statt dem erwarteten Fieldset '[NAME]' wurde ein Feld mit diesem Namen vorgefunden.",
        "Expected Fieldset Got Fieldsets": "(NAME) => Statt dem erwarteten einzelnen Fieldset '[NAME]' wurden mehrere Fieldsets mit diesem Namen vorgefunden.",
        "Expected Fieldset Got List": "(NAME) => Statt dem erwarteten Fieldset '[NAME]' wurde eine Liste mit diesem Namen vorgefunden.",
        "Expected Fieldset Got Section": "(NAME) => Statt dem erwarteten Fieldset '[NAME]' wurde eine Sektion mit diesem Namen vorgefunden.",
        "Expected Fieldsets Got Field": "(NAME) => Es wurden nur Fieldsets mit dem Namen '[NAME]' erwartet, jedoch ein Feld mit diesem Namen vorgefunden.",
        "Expected Fieldsets Got List": "(NAME) => Es wurden nur Fieldsets mit dem Namen '[NAME]' erwartet, jedoch eine Liste mit diesem Namen vorgefunden.",
        "Expected Fieldsets Got Section": "(NAME) => Es wurden nur Fieldsets mit dem Namen '[NAME]' erwartet, jedoch eine Sektion mit diesem Namen vorgefunden.",
        "Expected List Got Field": "(NAME) => Statt der erwarteten Liste '[NAME]' wurde ein Feld mit diesem Namen vorgefunden.",
        "Expected List Got Fieldset": "(NAME) => Statt der erwarteten Liste '[NAME]' wurde ein Fieldset mit diesem Namen vorgefunden.",
        "Expected List Got Lists": "(NAME) => Statt der erwarteten einzelnen Liste '[NAME]' wurden mehrere Listen mit diesem Namen vorgefunden.",
        "Expected List Got Section": "(NAME) => Statt der erwarteten Liste '[NAME]' wurde eine Sektion mit diesem Namen vorgefunden.",
        "Expected Lists Got Field": "(NAME) => Es wurden nur Listen mit dem Namen '[NAME]' erwartet, jedoch ein Feld mit diesem Namen vorgefunden.",
        "Expected Lists Got Fieldset": "(NAME) => Es wurden nur Listen mit dem Namen '[NAME]' erwartet, jedoch ein Fieldset mit diesem Namen vorgefunden.",
        "Expected Lists Got Section": "(NAME) => Es wurden nur Listen mit dem Namen '[NAME]' erwartet, jedoch eine Sektion mit diesem Namen vorgefunden.",
        "Expected Section Got Empty": "(NAME) => Statt der erwarteten Sektion '[NAME]' wurde ein leeres Element mit diesem Namen vorgefunden.",
        "Expected Section Got Field": "(NAME) => Statt der erwarteten Sektion '[NAME]' wurde ein Feld mit diesem Namen vorgefunden.",
        "Expected Section Got Fieldset": "(NAME) => Statt der erwarteten Sektion '[NAME]' wurde ein Fieldset mit diesem Namen vorgefunden.",
        "Expected Section Got List": "(NAME) => Statt der erwarteten Sektion '[NAME]' wurde eine Liste mit diesem Namen vorgefunden.",
        "Expected Section Got Sections": "(NAME) => Statt der erwarteten einzelnen Sektion '[NAME]' wurden mehrere Sektionen mit diesem Namen vorgefunden.",
        "Expected Sections Got Empty": "(NAME) => Es wurden nur Sektionen mit dem Namen '[NAME]' erwartet, jedoch ein leeres Element mit diesem Namen vorgefunden.",
        "Expected Sections Got Field": "(NAME) => Es wurden nur Sektionen mit dem Namen '[NAME]' erwartet, jedoch ein Feld mit diesem Namen vorgefunden.",
        "Expected Sections Got Fieldset": "(NAME) => Es wurden nur Sektionen mit dem Namen '[NAME]' erwartet, jedoch ein Fieldset mit diesem Namen vorgefunden.",
        "Expected Sections Got List": "(NAME) => Es wurden nur Sektionen mit dem Namen '[NAME]' erwartet, jedoch eine Liste mit diesem Namen vorgefunden.",
        "Generic Error": "(NAME) => Es besteht ein Problem mit dem Wert des Elements '[NAME]'.",
        "Max Count Not Met": "(NAME, ACTUAL, MAXIMUM) => Die Liste '[NAME]' enthält [ACTUAL] Einträge, darf aber nur maximal [MAXIMUM] Einträge enthalten.",
        "Min Count Not Met": "(NAME, ACTUAL, MINIMUM) => Die Liste '[NAME]' enthält [ACTUAL] Einträge, muss aber mindestens [MINIMUM] Einträge enthalten.",
        "Missing Element": "(NAME) => Das Element '[NAME]' fehlt - falls es angegeben wurde eventuell nach Tippfehlern Ausschau halten und auch die Gross/Kleinschreibung beachten.",
        "Missing Field": "(NAME) => Das Feld '[NAME]' fehlt - falls es angegeben wurde eventuell nach Tippfehlern Ausschau halten und auch die Gross/Kleinschreibung beachten.",
        "Missing Field Value": "(NAME) => Das Feld '[NAME]' muss einen Wert enthalten.",
        "Missing Fieldset": "(NAME) => Das Fieldset '[NAME]' fehlt - falls es angegeben wurde eventuell nach Tippfehlern Ausschau halten und auch die Gross/Kleinschreibung beachten.",
        "Missing Fieldset Entry": "(NAME) => Der Fieldset Eintrag '[NAME]' fehlt - falls er angegeben wurde eventuell nach Tippfehlern Ausschau halten und auch die Gross/Kleinschreibung beachten.",
        "Missing Fieldset Entry Value": "(NAME) => Der Fieldset Eintrag '[NAME]' muss einen Wert enthalten.",
        "Missing List": "(NAME) => Die Liste '[NAME]' fehlt - falls sie angegeben wurde eventuell nach Tippfehlern Ausschau halten und auch die Gross/Kleinschreibung beachten.",
        "Missing List Item Value": "(NAME) => Die Liste '[NAME]' darf keine leeren Einträge enthalten.",
        "Missing Section": "(NAME) => Die Sektion '[NAME]' fehlt - falls sie angegeben wurde eventuell nach Tippfehlern Ausschau halten und auch die Gross/Kleinschreibung beachten."
      },
      "Loaders": {
        "Invalid Boolean": "(NAME) => '[NAME]' muss einen Boolean Wert enthalten - erlaubte Werte sind 'true', 'false', 'yes' und 'no'.",
        "Invalid Color": "(NAME) => '[NAME]' muss eine Farbe enthalten, zum Beispiel '#B6D918', '#fff' oder '#01b'.",
        "Invalid Date": "(NAME) => '[NAME]' muss ein valides Datum enhalten, zum Beispiel '1993-11-18'.",
        "Invalid Datetime": "(NAME) => '[NAME]' muss ein valides Datum oder Datum und Zeit enhalten, zum Beispiel '1961-01-22' oder '1989-11-09T19:17Z' (siehe https://www.w3.org/TR/NOTE-datetime).",
        "Invalid Email": "(NAME) => '[NAME]' muss eine valide Email Adresse enthalten, zum Beispiel 'jane.doe@eno-lang.org'.",
        "Invalid Float": "(NAME) => '[NAME]' muss eine Dezimalzahl enthalten, zum Beispiel '13.0', '-9.159' oder '42'.",
        "Invalid Integer": "(NAME) => '[NAME]' muss eine Ganzzahl enthalten, zum Beispiel '42' oder '-21'.",
        "Invalid Json": "(NAME, ERROR) => '[NAME]' muss valides JSON enthalten - die Meldung des Parsers war: '[ERROR]'.",
        "Invalid Lat Lng": "(NAME) => '[NAME]' muss ein valides Breiten-/Längengrad Koordinatenpaar enthalten, zum Beispiel '48.2093723, 16.356099'.",
        "Invalid Url": "(NAME) => '[NAME]' muss eine valide URL enhalten, zum Beispiel 'https://eno-lang.org'."
      }
    },
    "en": {
      "Elements": {
        "Document": "Document",
        "Empty": "Empty Element",
        "Field": "Field",
        "Fieldset": "Fieldset",
        "Fieldset Entry": "Fieldset Entry",
        "List": "List",
        "List Item": "List Item",
        "Section": "Section",
        "Value": "Value"
      },
      "Reporting": {
        "Content Header": "Content",
        "Gutter Header": "Line"
      },
      "Tokenization": {
        "Invalid Line": "(LINE) => Line [LINE] does not follow any specified pattern.",
        "Unterminated Block": "(NAME, LINE) => The block '[NAME]' starting in line [LINE] is not terminated until the end of the document.",
        "Unterminated Escaped Name": "(LINE) => In line [LINE] the name of an element is escaped, but the escape sequence is not terminated until the end of the line."
      },
      "Analysis": {
        "Duplicate Fieldset Entry Name": "(FIELDSET_NAME, ENTRY_NAME) => The fieldset '[FIELDSET_NAME]' contains two entries named '[ENTRY_NAME]'.",
        "Fieldset Entry In Field": "(LINE) => Line [LINE] contains a fieldset entry inside a field.",
        "Fieldset Entry In List": "(LINE) => Line [LINE] contains a fieldset entry inside a list.",
        "List Item In Field": "(LINE) => Line [LINE] contains a list item inside a field.",
        "List Item In Fieldset": "(LINE) => Line [LINE] contains a list item inside a fieldset.",
        "Missing Element For Continuation": "(LINE) => Line [LINE] contains a continuation without any continuable element being specified before.",
        "Missing Name For Fieldset Entry": "(LINE) => Line [LINE] contains a fieldset entry without a name for a fieldset being specified before.",
        "Missing Name For List Item": "(LINE) => Line [LINE] contains a list item without a name for a list being specified before.",
        "Section Hierarchy Layer Skip": "(LINE) => Line [LINE] starts a section that is more than one level deeper than the current one."
      },
      "Resolution": {
        "Copying Block Into Fieldset": "(LINE) => In line [LINE] a block is copied into a fieldset.",
        "Copying Block Into List": "(LINE) => In line [LINE] a block is copied into a list.",
        "Copying Block Into Section": "(LINE) => In line [LINE] a block is copied into a section.",
        "Copying Field Into Fieldset": "(LINE) => In line [LINE] a field is copied into a fieldset.",
        "Copying Field Into List": "(LINE) => In line [LINE] a field is copied into a list.",
        "Copying Field Into Section": "(LINE) => In line [LINE] a field is copied into a section.",
        "Copying Fieldset Into Field": "(LINE) => In line [LINE] a fieldset is copied into a field.",
        "Copying Fieldset Into List": "(LINE) => In line [LINE] a fieldset is copied into a list.",
        "Copying Fieldset Into Section": "(LINE) => In line [LINE] a fieldset is copied into a section.",
        "Copying List Into Field": "(LINE) => In line [LINE] a list is copied into a field.",
        "Copying List Into Fieldset": "(LINE) => In line [LINE] a list is copied into a fieldset.",
        "Copying List Into Section": "(LINE) => In line [LINE] a list is copied into a section.",
        "Copying Section Into Empty": "(LINE) => In line [LINE] a section is copied into an empty element.",
        "Copying Section Into Field": "(LINE) => In line [LINE] a section is copied into a field.",
        "Copying Section Into Fieldset": "(LINE) => In line [LINE] a section is copied into a fieldset.",
        "Copying Section Into List": "(LINE) => In line [LINE] a section is copied into a list.",
        "Cyclic Dependency": "(LINE, NAME) => In line [LINE] '[NAME]' is copied into itself.",
        "Multiple Templates Found": "(LINE, NAME) => In line [LINE] it is not clear which of the elements named '[NAME]' should be copied.",
        "Template Not Found": "(LINE, NAME) => In line [LINE] the element '[NAME]' should be copied, but it was not found."
      },
      "Validation": {
        "Exact Count Not Met": "(NAME, ACTUAL, EXPECTED) => The list '[NAME]' contains [ACTUAL] items, but must contain exactly [EXPECTED] items.",
        "Excess Name": "(NAME) => An excess element named '[NAME]' was found, is it possibly a typo?",
        "Expected Element Got Elements": "(NAME) => Instead of the expected single element '[NAME]' several elements with this name were found.",
        "Expected Field Got Fields": "(NAME) => Instead of the expected single field '[NAME]' several fields with this name were found.",
        "Expected Field Got Fieldset": "(NAME) => Instead of the expected field '[NAME]' a fieldset with this name was found.",
        "Expected Field Got List": "(NAME) => Instead of the expected field '[NAME]' a list with this name was found.",
        "Expected Field Got Section": "(NAME) => Instead of the expected field '[NAME]' a section with this name was found.",
        "Expected Fields Got Fieldset": "(NAME) => Only fields with the name '[NAME]' were expected, but a fieldset with this name was found.",
        "Expected Fields Got List": "(NAME) => Only fields with the name '[NAME]' were expected, but a list with this name was found.",
        "Expected Fields Got Section": "(NAME) => Only fields with the name '[NAME]' were expected, but a section with this name was found.",
        "Expected Fieldset Got Field": "(NAME) => Instead of the expected fieldset '[NAME]' a field with this name was found.",
        "Expected Fieldset Got Fieldsets": "(NAME) => Instead of the expected single fieldset '[NAME]' several fieldsets with this name were found.",
        "Expected Fieldset Got List": "(NAME) => Instead of the expected fieldset '[NAME]' a list with this name was found.",
        "Expected Fieldset Got Section": "(NAME) => Instead of the expected fieldset '[NAME]' a section with this name was found.",
        "Expected Fieldsets Got Field": "(NAME) => Only fieldsets with the name '[NAME]' were expected, but a field with this name was found.",
        "Expected Fieldsets Got List": "(NAME) => Only fieldsets with the name '[NAME]' were expected, but a list with this name was found.",
        "Expected Fieldsets Got Section": "(NAME) => Only fieldsets with the name '[NAME]' were expected, but a section with this name was found.",
        "Expected List Got Field": "(NAME) => Instead of the expected list '[NAME]' a field with this name was found.",
        "Expected List Got Fieldset": "(NAME) => Instead of the expected list '[NAME]' a fieldset with this name was found.",
        "Expected List Got Lists": "(NAME) => Instead of the expected single list '[NAME]' several lists with this name were found.",
        "Expected List Got Section": "(NAME) => Instead of the expected list '[NAME]' a section with this name was found.",
        "Expected Lists Got Field": "(NAME) => Only lists with the name '[NAME]' were expected, but a field with this name was found.",
        "Expected Lists Got Fieldset": "(NAME) => Only lists with the name '[NAME]' were expected, but a fieldset with this name was found.",
        "Expected Lists Got Section": "(NAME) => Only lists with the name '[NAME]' were expected, but a section with this name was found.",
        "Expected Section Got Empty": "(NAME) => Instead of the expected section '[NAME]' an empty element with this name was found.",
        "Expected Section Got Field": "(NAME) => Instead of the expected section '[NAME]' a field with this name was found.",
        "Expected Section Got Fieldset": "(NAME) => Instead of the expected section '[NAME]' a fieldset with this name was found.",
        "Expected Section Got List": "(NAME) => Instead of the expected section '[NAME]' a list with this name was found.",
        "Expected Section Got Sections": "(NAME) => Instead of the expected single section '[NAME]' several sections with this name were found.",
        "Expected Sections Got Empty": "(NAME) => Only sections with the name '[NAME]' were expected, but an empty element with this name was found.",
        "Expected Sections Got Field": "(NAME) => Only sections with the name '[NAME]' were expected, but a field with this name was found.",
        "Expected Sections Got Fieldset": "(NAME) => Only sections with the name '[NAME]' were expected, but a fieldset with this name was found.",
        "Expected Sections Got List": "(NAME) => Only sections with the name '[NAME]' were expected, but a list with this name was found.",
        "Generic Error": "(NAME) => There is a problem with the value of the element '[NAME]'.",
        "Max Count Not Met": "(NAME, ACTUAL, MAXIMUM) => The list '[NAME]' contains [ACTUAL] items, but may only contain a maximum of [MAXIMUM] items.",
        "Min Count Not Met": "(NAME, ACTUAL, MINIMUM) => The list '[NAME]' contains [ACTUAL] items, but must contain at least [MINIMUM] items.",
        "Missing Element": "(NAME) => The element '[NAME]' is missing - in case it has been specified look for typos and also check for correct capitalization.",
        "Missing Field": "(NAME) => The field '[NAME]' is missing - in case it has been specified look for typos and also check for correct capitalization.",
        "Missing Field Value": "(NAME) => The field '[NAME]' must contain a value.",
        "Missing Fieldset": "(NAME) => The fieldset '[NAME]' is missing - in case it has been specified look for typos and also check for correct capitalization.",
        "Missing Fieldset Entry": "(NAME) => The fieldset entry '[NAME]' is missing - in case it has been specified look for typos and also check for correct capitalization.",
        "Missing Fieldset Entry Value": "(NAME) => The fieldset entry '[NAME]' must contain a value.",
        "Missing List": "(NAME) => The list '[NAME]' is missing - in case it has been specified look for typos and also check for correct capitalization.",
        "Missing List Item Value": "(NAME) => The list '[NAME]' may not contain empty items.",
        "Missing Section": "(NAME) => The section '[NAME]' is missing - in case it has been specified look for typos and also check for correct capitalization."
      },
      "Loaders": {
        "Invalid Boolean": "(NAME) => '[NAME]' must contain a boolean - allowed values are 'true', 'false', 'yes' and 'no'.",
        "Invalid Color": "(NAME) => '[NAME]' must contain a color, for instance '#B6D918', '#fff' or '#01b'.",
        "Invalid Date": "(NAME) => '[NAME]' must contain a valid date, for instance '1993-11-18'.",
        "Invalid Datetime": "(NAME) => '[NAME]' must contain a valid date or date and time, for instance '1961-01-22' or '1989-11-09T19:17Z' (see https://www.w3.org/TR/NOTE-datetime).",
        "Invalid Email": "(NAME) => '[NAME]' must contain a valid email address, for instance 'jane.doe@eno-lang.org'.",
        "Invalid Float": "(NAME) => '[NAME]' must contain a decimal number, for instance '13.0', '-9.159' or '42'.",
        "Invalid Integer": "(NAME) => '[NAME]' must contain an integer, for instance '42' or '-21'.",
        "Invalid Json": "(NAME, ERROR) => '[NAME]' must contain valid JSON - the parser returned: '[ERROR]'.",
        "Invalid Lat Lng": "(NAME) => '[NAME]' must contain a valid latitude/longitude coordinate pair, for instance '48.2093723, 16.356099'.",
        "Invalid Url": "(NAME) => '[NAME]' must contain a valid URL, for instance 'https://eno-lang.org'."
      }
    },
    "es": {
      "Elements": {
        "Document": "Documento",
        "Empty": "Elemento Vacío",
        "Field": "Casilla",
        "Fieldset": "Collecíon de Casillas",
        "Fieldset Entry": "Casilla de Collecíon",
        "List": "Lista",
        "List Item": "Entrada de Lista",
        "Section": "Sección",
        "Value": "Valor"
      },
      "Reporting": {
        "Content Header": "Contenido",
        "Gutter Header": "Línea"
      },
      "Tokenization": {
        "Invalid Line": "(LINE) => Línea [LINE] no sigue un patrón especificado.",
        "Unterminated Block": "(NAME, LINE) => El bloque '[NAME]' que comienza en la línea [LINE] no termina hasta el final del documento.",
        "Unterminated Escaped Name": "(LINE) => En la línea [LINE], el nombre de un elemento se escapa, pero esta secuencia de escape no termina hasta el final de la línea."
      },
      "Analysis": {
        "Duplicate Fieldset Entry Name": "(FIELDSET_NAME, ENTRY_NAME) => La collecíon de casillas '[FIELDSET_NAME]' contiene dos casillas llamadas '[ENTRY_NAME]'.",
        "Fieldset Entry In Field": "(LINE) => Línea [LINE] contiene una casilla de collecíon en medio de una casilla.",
        "Fieldset Entry In List": "(LINE) => Línea [LINE] contiene una casilla de collecíon en medio de una lista.",
        "List Item In Field": "(LINE) => Línea [LINE] contiene una entrada de lista en medio de una casilla.",
        "List Item In Fieldset": "(LINE) => Línea [LINE] contiene una entrada de lista en medio de una collecíon de casillas.",
        "Missing Element For Continuation": "(LINE) => Línea [LINE] contiene una continuacíon sin un elemento que se puede continuar especificado antes.",
        "Missing Name For Fieldset Entry": "(LINE) => Línea [LINE] contiene una casilla de collecíon sin un nombre especificado para una collecíon de casillas antes.",
        "Missing Name For List Item": "(LINE) => Línea [LINE] contiene una entrada de lista sin nombre para una lista especificada antes.",
        "Section Hierarchy Layer Skip": "(LINE) => Línea [LINE] inicia una sección que es más de un nivel más bajo el actual."
      },
      "Resolution": {
        "Copying Block Into Fieldset": "(LINE) => En la línea [LINE], un bloque se copia en una collecíon de casillas.",
        "Copying Block Into List": "(LINE) => En la línea [LINE], un bloque se copia en una lista.",
        "Copying Block Into Section": "(LINE) => En la línea [LINE], un bloque se copia en una sección.",
        "Copying Field Into Fieldset": "(LINE) => En la línea [LINE], una casilla se copia en una collecíon de casillas.",
        "Copying Field Into List": "(LINE) => En la línea [LINE] una casilla se copia en una lista.",
        "Copying Field Into Section": "(LINE) => En la línea [LINE], una casilla se copia en una sección.",
        "Copying Fieldset Into Field": "(LINE) => En la línea [LINE], una collecíon de casillas se copia en una casilla.",
        "Copying Fieldset Into List": "(LINE) => En la línea [LINE], una collecíon de casillas se copia en una lista.",
        "Copying Fieldset Into Section": "(LINE) => En la línea [LINE], una collecíon de casillas se copia en una sección.",
        "Copying List Into Field": "(LINE) => En la línea [LINE], una lista se copia en una casilla.",
        "Copying List Into Fieldset": "(LINE) => En la línea [LINE], una lista se copia en una collecíon de casillas.",
        "Copying List Into Section": "(LINE) => En la línea [LINE], una lista se copia en una sección.",
        "Copying Section Into Empty": "(LINE) => En la línea [LINE] una sección se copia en un elemento vacío.",
        "Copying Section Into Field": "(LINE) => En la línea [LINE], una sección se copia en una casilla.",
        "Copying Section Into Fieldset": "(LINE) => En la línea [LINE], una sección se copia en una collecíon de casillas.",
        "Copying Section Into List": "(LINE) => En la línea [LINE] una sección se copia en una lista.",
        "Cyclic Dependency": "(LINE, NAME) => En la línea [LINE] '[NAME]' se copia en sí mismo.",
        "Multiple Templates Found": "(LINE, NAME) => En la línea [LINE] no está claro cual de los elementos con el nombre '[NAME]' debe ser copiado.",
        "Template Not Found": "(LINE, NAME) => En la línea [LINE] debe ser copiado el elemento '[NAME]', pero no se encontró."
      },
      "Validation": {
        "Exact Count Not Met": "(NAME, ACTUAL, EXPECTED) => La lista '[NAME]' contiene [ACTUAL] entradas, pero debe contener exactamente [EXPECTED] entradas.",
        "Excess Name": "(NAME) => Un elemento sobrante con el nombre '[NAME]' se encontró, ¿es posiblemente un error tipográfico?",
        "Expected Element Got Elements": "(NAME) => En lugar del único esperado elemento '[NAME]' se encontraron varios elementos con este nombre.",
        "Expected Field Got Fields": "(NAME) => En lugar de la única casilla esperada '[NAME]' se encontraron varias casillas con este nombre.",
        "Expected Field Got Fieldset": "(NAME) => En lugar de la casilla '[NAME]' esperada se encontró una collecíon de casillas con este nombre.",
        "Expected Field Got List": "(NAME) => En lugar de la casilla '[NAME]' esperada se encontró una lista con este nombre.",
        "Expected Field Got Section": "(NAME) => En lugar de la casilla '[NAME]' esperada se encontró una sección con este nombre.",
        "Expected Fields Got Fieldset": "(NAME) => Solo se esperaban casillas con el nombre '[NAME]', pero se encontró una collecíon de casillas con este nombre.",
        "Expected Fields Got List": "(NAME) => Solo se esperaban casillas con el nombre '[NAME]', pero se encontró una lista con este nombre.",
        "Expected Fields Got Section": "(NAME) => Solo se esperaban casillas con el nombre '[NAME]', pero se encontró una sección con este nombre.",
        "Expected Fieldset Got Field": "(NAME) => En lugar de la collecíon de casillas '[NAME]' esperada se encontró una casilla con este nombre.",
        "Expected Fieldset Got Fieldsets": "(NAME) => En lugar de la única esperada collecíon de casillas '[NAME]' se encontraron varias collecíones de casillas con este nombre.",
        "Expected Fieldset Got List": "(NAME) => En lugar de la collecíon de casillas '[NAME]' esperada se encontró una lista con este nombre.",
        "Expected Fieldset Got Section": "(NAME) => En lugar de la collecíon de casillas '[NAME]' esperada se encontró una sección con este nombre.",
        "Expected Fieldsets Got Field": "(NAME) => Solo se esperaban collecíones de casillas con el nombre '[NAME]', pero se encontró una casilla con este nombre.",
        "Expected Fieldsets Got List": "(NAME) => Solo se esperaban collecíones de casillas con el nombre '[NAME]', pero se encontró una lista con este nombre.",
        "Expected Fieldsets Got Section": "(NAME) => Solo se esperaban collecíones de casillas con el nombre '[NAME]', pero se encontró una sección con este nombre.",
        "Expected List Got Field": "(NAME) => En lugar de la lista '[NAME]' esperada se encontró una casilla con este nombre.",
        "Expected List Got Fieldset": "(NAME) => En lugar de la lista '[NAME]' esperada se encontró una collecíon de casillas con este nombre.",
        "Expected List Got Lists": "(NAME) => En lugar de la única lista esperada '[NAME]' se encontraron varias listas con este nombre.",
        "Expected List Got Section": "(NAME) => En lugar de la lista '[NAME]' esperada se encontró una sección con este nombre.",
        "Expected Lists Got Field": "(NAME) => Solo se esperaban listas con el nombre '[NAME]', pero se encontró una casilla con este nombre.",
        "Expected Lists Got Fieldset": "(NAME) => Solo se esperaban listas con el nombre '[NAME]', pero se encontró una collecíon de casillas con este nombre.",
        "Expected Lists Got Section": "(NAME) => Solo se esperaban listas con el nombre '[NAME]', pero se encontró una sección con este nombre.",
        "Expected Section Got Empty": "(NAME) => En lugar de la sección '[NAME]' esperada se encontró un elemento vacío con este nombre.",
        "Expected Section Got Field": "(NAME) => En lugar de la sección '[NAME]' esperada se encontró una casilla con este nombre.",
        "Expected Section Got Fieldset": "(NAME) => En lugar de la sección '[NAME]' esperada se encontró una collecíon de casillas con este nombre.",
        "Expected Section Got List": "(NAME) => En lugar de la sección '[NAME]' esperada se encontró una lista con este nombre.",
        "Expected Section Got Sections": "(NAME) => En lugar de la única sección esperada '[NAME]' se encontraron varias secciones con este nombre.",
        "Expected Sections Got Empty": "(NAME) => Solo se esperaban secciones con el nombre '[NAME]', pero se encontró un elemento vacío con este nombre.",
        "Expected Sections Got Field": "(NAME) => Solo se esperaban secciones con el nombre '[NAME]', pero se encontró una casilla con este nombre.",
        "Expected Sections Got Fieldset": "(NAME) => Solo se esperaban secciones con el nombre '[NAME]', pero se encontró una collecíon de casillas con este nombre.",
        "Expected Sections Got List": "(NAME) => Solo se esperaban secciones con el nombre '[NAME]', pero se encontró una lista con este nombre.",
        "Generic Error": "(NAME) => Hay un problema con el valor del elemento '[NAME]'.",
        "Max Count Not Met": "(NAME, ACTUAL, MAXIMUM) => La lista '[NAME]' contiene [ACTUAL] entradas, pero debe contener un máximo de [MAXIMUM] entradas.",
        "Min Count Not Met": "(NAME, ACTUAL, MINIMUM) => La lista '[NAME]' contiene [ACTUAL] entradas, pero debe contener al menos [MINIMUM] entradas.",
        "Missing Element": "(NAME) => Falta el elemento '[NAME]' - si se proporcionó, mira por errores ortográficos y también distingue entre mayúsculas y minúsculas.",
        "Missing Field": "(NAME) => Falta la casilla '[NAME]' - si se proporcionó, mira por errores ortográficos y también distingue entre mayúsculas y minúsculas.",
        "Missing Field Value": "(NAME) => La casilla '[NAME]' debe contener un valor.",
        "Missing Fieldset": "(NAME) => Falta la collecíon de casillas '[NAME]' - si se proporcionó, mira por errores ortográficos y también distingue entre mayúsculas y minúsculas.",
        "Missing Fieldset Entry": "(NAME) => Falta la casilla de collecíon '[NAME]' - si se proporcionó, mira por errores ortográficos y también distingue entre mayúsculas y minúsculas.",
        "Missing Fieldset Entry Value": "(NAME) => La casilla de collecíon '[NAME]' debe contener un valor.",
        "Missing List": "(NAME) => Falta la lista '[NAME]' - si se proporcionó, mira por errores ortográficos y también distingue entre mayúsculas y minúsculas.",
        "Missing List Item Value": "(NAME) => La lista '[NAME]' no debe contener entradas vacías.",
        "Missing Section": "(NAME) => Falta la sección '[NAME]' - si se proporcionó, mira por errores ortográficos y también distingue entre mayúsculas y minúsculas."
      },
      "Loaders": {
        "Invalid Boolean": "(NAME) => '[NAME]' debe contener un valor booleano - valores permitidos son 'true', 'false', 'yes' y 'no'.",
        "Invalid Color": "(NAME) => '[NAME]' debe contener un color, por ejemplo '#B6D918', '#fff' o '#01b'.",
        "Invalid Date": "(NAME) => '[NAME]' debe contener una valida fecha, por ejemplo '1993-11-18'.",
        "Invalid Datetime": "(NAME) => '[NAME]' debe contener una valida fecha o fecha y hora, por ejemplo '1961-01-22' o '1989-11-09T19:17Z' (vea https://www.w3.org/TR/NOTE-datetime).",
        "Invalid Email": "(NAME) => '[NAME]' debe contener una valida dirección electrónica, por ejemplo 'jane.doe@eno-lang.org'.",
        "Invalid Float": "(NAME) => '[NAME]' debe contener un número decimal, por ejemplo '13.0', '-9.159' o '42'.",
        "Invalid Integer": "(NAME) => '[NAME]' debe contener un número entero, por ejemplo '42' o '-21'.",
        "Invalid Json": "(NAME, ERROR) => '[NAME]' debe contener JSON valido - el mensaje del parser fue '[ERROR]'.",
        "Invalid Lat Lng": "(NAME) => '[NAME]' debe contener una valida pareja de coordenadas latitud/longitud, por ejemplo '48.2093723, 16.356099'.",
        "Invalid Url": "(NAME) => '[NAME]' debe contener un URL valido, por ejemplo 'https://eno-lang.org'."
      }
    }
  }
}